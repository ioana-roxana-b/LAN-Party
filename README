1. In Task 1, I implemented the Player class to hold data for each player, the Team class to store team names, the number of players, and a pointer to Player objects to store player data. With this data, I created a List class containing a Team object and a pointer to the next element. The list is constructed using a special function to add elements at the beginning, reading data from the file "d.in" and adding it to the list. Another function is used to display the results in the output file.

2. In Task 2, I utilized a node removal function implemented in the List class, along with a helper function to return the minimum score from the team list. This helped determine which team to eliminate at each iteration. Additionally, I implemented a function to calculate powers of two to meet a condition specified in the task.

3. Task 3 involved creating the "match queue" class, storing information about each team. Data was read from an auxiliary file, which contained the remaining teams after executing Task 2 and the number of teams left. Match display was implemented as a member function of the class. Additionally, I created two classes for the stack of losers and winners, implementing functions for creation, display, and deletion. Function calls were made in the "solutions.cpp" file, where I also created the list of the last 8 remaining teams in the game, using another class called "last8" with corresponding functions.

4. For Task 4, I created a BST class, implementing functions to create a node, insert elements, and display the tree. The tree was constructed in the "solutions.cpp" file after creating the list of the final 8 teams from Task 3. Insertion function included a series of conditions to ensure correct tree creation.

5. Task 5 involved creating an AVL class, implementing an insertion function, rotation functions, a display function, and a function to return height. To add teams to the tree, I displayed the tree from Task 4 in one of my auxiliary files. Then, in "solutions.cpp," I read the teams previously displayed and added them to the tree before displaying it again.

In addition to the aforementioned functions, I have helper functions such as display functions, getters to access private class fields when needed, and set_points functions to increment team scores by 1 in case of victory. Additional display functions were created because I extensively worked with files, using the output of one task as the input for another. For example, to create the list of the final 8 teams remaining in the game, I used a separate file where I previously displayed the teams from the winners' stack when their number reached 8.
