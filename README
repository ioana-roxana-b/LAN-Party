Am reusit sa implementez toate cerintele, checker-ul imi da 100 de puncte.

1. La task-ul 1, am implementat clasa Player in care am datele fiecarui jucator, o clasa Echipa in care am numele echipei, numarul de jucatori, si un obiect de tip pointer la Player in care se vor stoca datele despre jucatori. Cu aceste date am creeat o clasa Lista in care am un obiect de tip Echipa si un pointer catre elementul urmator. Lista este creeata cu ajutorul unei functii speciale, prin adaugare la inceput, se citesc datele din fisierul d.in si se adauga in lista si cu ajutorul altei functii se afiseaza in fisierul de rezultate.

2. La task-ul 2, am utilizat functia de eliminare a unui nod, implementata in clasa Lista, o functie ajutatoare care imi returneaza scorul minim din lista de echipe si care ma ajuta sa decid de fiecare data ce echipa elimin si pe langa scor_minim am mai implementat o functie care imi calcula puterile lui doi, pentru a putea respecta conditia impusa in cerinta.

3. La task-ul 3, am creat mai intai clasa coada_meciuri, in care am retinut informatiile fiecarei echipe, pe care le-am citit dintr-un fisier ajutator creat de mine, in care am afisat echipele ramase dupa executia task-ului 2 si numarul de echipe ramase, si afisarea meciurilor am facut-o intr-o functie membra a clasei. Pe langa clasa coada_meciuri, am mai creat doua clase pentru stiva de invinsi si cea de castigatori in care am implemenatat functii de creare, afisare si stergere. Apelarea functiilor am facut-o in fiserul solutii.cpp unde am creeat si lista cu ultimele 8 echipe ramase in joc, lista pentru care am implementat o alta clasa numita last8, cu functiile corespunzatoare.

4. Pentru task-ul 4 am creat o clasa numita BST, in care am implemetat functia de creare a unui nod, functia de inserare si doua functii de afisare, si am creat arborele in fisierul solutii.cpp in urma crearii listei cu cele 8 echipe de la task-ul 3. In functia de inserare am implementat o serie de conditii pentru a ma asigura ca arborele este creat corect.

5. La task-ul 5 am creat o clasa numita AVL, in care am facut o functie de inserare, functii de rotatie, functia de afisare si o functie care imi returneaza inaltimea. Ca sa adaug echipele in arbore, am afisat arborele de la task-ul 4 intr-unul din fisierele mele suplimentare, apoi in solutii.cpp in functia cerinta5 am citit echipele afisate anterior si le-am adaugat in arbore, dupa care l-am afisat.

Pe langa functiile prezentate mai sus, mai am functii ajutatoare precum, functii de afisare, get-eri care ma ajuta sa accesez campurile private al claselor atunci cand am nevoie si mai am niste functii de set_points in care cresc scorul echipelor cu 1 in cazul in care castiga meciurile. Functiile de afisare suplimentare le-am creat pentru ca am lucrat foarte mult cu fisiere, astfel ca output-ul unui task, mi-a folosit de cele mai multe ori ca input-ul pentru alt task, de exemplu pentru a putea creea lista cu cele 8 echipe ramase in joc, am folosit un fisier separat in care afisez anterior echipele din stiva de castigatori in momentul in care numarul acestora este egal cu 8.

Fisierele care au extensia .h nu .hpp sunt asa din cauza faptului ca am lucrat pentru prima data in CLion si nu stiam sigur cum se modifica extensiile la inceput.
